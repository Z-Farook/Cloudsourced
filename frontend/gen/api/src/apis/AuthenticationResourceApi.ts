/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Authentication,
    AuthenticationFromJSON,
    AuthenticationToJSON,
    AuthenticationUserDTO,
    AuthenticationUserDTOFromJSON,
    AuthenticationUserDTOToJSON,
    RegisterUserDTO,
    RegisterUserDTOFromJSON,
    RegisterUserDTOToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AuthenticateUserUsingPOSTRequest {
    authenticationUserDTO: AuthenticationUserDTO;
}

export interface RegisterNewUserUsingPOSTRequest {
    registerUserDTO: RegisterUserDTO;
}

/**
 * 
 */
export class AuthenticationResourceApi extends runtime.BaseAPI {

    /**
     * authenticateUser
     */
    async authenticateUserUsingPOSTRaw(requestParameters: AuthenticateUserUsingPOSTRequest): Promise<runtime.ApiResponse<Authentication>> {
        if (requestParameters.authenticationUserDTO === null || requestParameters.authenticationUserDTO === undefined) {
            throw new runtime.RequiredError('authenticationUserDTO','Required parameter requestParameters.authenticationUserDTO was null or undefined when calling authenticateUserUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationUserDTOToJSON(requestParameters.authenticationUserDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationFromJSON(jsonValue));
    }

    /**
     * authenticateUser
     */
    async authenticateUserUsingPOST(requestParameters: AuthenticateUserUsingPOSTRequest): Promise<Authentication> {
        const response = await this.authenticateUserUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * registerNewUser
     */
    async registerNewUserUsingPOSTRaw(requestParameters: RegisterNewUserUsingPOSTRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.registerUserDTO === null || requestParameters.registerUserDTO === undefined) {
            throw new runtime.RequiredError('registerUserDTO','Required parameter requestParameters.registerUserDTO was null or undefined when calling registerNewUserUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserDTOToJSON(requestParameters.registerUserDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * registerNewUser
     */
    async registerNewUserUsingPOST(requestParameters: RegisterNewUserUsingPOSTRequest): Promise<User> {
        const response = await this.registerNewUserUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
