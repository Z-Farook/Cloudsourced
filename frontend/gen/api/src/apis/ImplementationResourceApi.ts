/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Implementation,
    ImplementationFromJSON,
    ImplementationToJSON,
    ImplementationDTO,
    ImplementationDTOFromJSON,
    ImplementationDTOToJSON,
} from '../models';

export interface AddImplementationToFeatureUsingPOSTRequest {
    featureId: number;
    implementationDTO: ImplementationDTO;
}

export interface CreateNewUsingPOST1Request {
    entity: Implementation;
}

export interface DeleteUsingDELETE1Request {
    id?: number;
}

export interface GetOneByIdUsingGET1Request {
    id: number;
}

/**
 * 
 */
export class ImplementationResourceApi extends runtime.BaseAPI {

    /**
     * addImplementationToFeature
     */
    async addImplementationToFeatureUsingPOSTRaw(requestParameters: AddImplementationToFeatureUsingPOSTRequest): Promise<runtime.ApiResponse<ImplementationDTO>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling addImplementationToFeatureUsingPOST.');
        }

        if (requestParameters.implementationDTO === null || requestParameters.implementationDTO === undefined) {
            throw new runtime.RequiredError('implementationDTO','Required parameter requestParameters.implementationDTO was null or undefined when calling addImplementationToFeatureUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/implementation/{featureId}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImplementationDTOToJSON(requestParameters.implementationDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementationDTOFromJSON(jsonValue));
    }

    /**
     * addImplementationToFeature
     */
    async addImplementationToFeatureUsingPOST(requestParameters: AddImplementationToFeatureUsingPOSTRequest): Promise<ImplementationDTO> {
        const response = await this.addImplementationToFeatureUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * All
     */
    async allUsingGET1Raw(): Promise<runtime.ApiResponse<Array<ImplementationDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/implementation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImplementationDTOFromJSON));
    }

    /**
     * All
     */
    async allUsingGET1(): Promise<Array<ImplementationDTO>> {
        const response = await this.allUsingGET1Raw();
        return await response.value();
    }

    /**
     * createNew
     */
    async createNewUsingPOST1Raw(requestParameters: CreateNewUsingPOST1Request): Promise<runtime.ApiResponse<Implementation>> {
        if (requestParameters.entity === null || requestParameters.entity === undefined) {
            throw new runtime.RequiredError('entity','Required parameter requestParameters.entity was null or undefined when calling createNewUsingPOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/implementation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImplementationToJSON(requestParameters.entity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementationFromJSON(jsonValue));
    }

    /**
     * createNew
     */
    async createNewUsingPOST1(requestParameters: CreateNewUsingPOST1Request): Promise<Implementation> {
        const response = await this.createNewUsingPOST1Raw(requestParameters);
        return await response.value();
    }

    /**
     * delete
     */
    async deleteUsingDELETE1Raw(requestParameters: DeleteUsingDELETE1Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/implementation`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete
     */
    async deleteUsingDELETE1(requestParameters: DeleteUsingDELETE1Request): Promise<void> {
        await this.deleteUsingDELETE1Raw(requestParameters);
    }

    /**
     * getOneById
     */
    async getOneByIdUsingGET1Raw(requestParameters: GetOneByIdUsingGET1Request): Promise<runtime.ApiResponse<ImplementationDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOneByIdUsingGET1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/implementation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementationDTOFromJSON(jsonValue));
    }

    /**
     * getOneById
     */
    async getOneByIdUsingGET1(requestParameters: GetOneByIdUsingGET1Request): Promise<ImplementationDTO> {
        const response = await this.getOneByIdUsingGET1Raw(requestParameters);
        return await response.value();
    }

}
