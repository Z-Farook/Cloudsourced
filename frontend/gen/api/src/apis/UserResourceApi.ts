/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOToJSON,
} from '../models';

export interface CreateNewUsingPOST3Request {
    entity: User;
}

export interface DeleteUsingDELETE3Request {
    id?: number;
}

export interface GetOneByIdUsingGET3Request {
    id: number;
}

/**
 * 
 */
export class UserResourceApi extends runtime.BaseAPI {

    /**
     * All
     */
    async allUsingGET3Raw(): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     * All
     */
    async allUsingGET3(): Promise<Array<UserDTO>> {
        const response = await this.allUsingGET3Raw();
        return await response.value();
    }

    /**
     * createNew
     */
    async createNewUsingPOST3Raw(requestParameters: CreateNewUsingPOST3Request): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.entity === null || requestParameters.entity === undefined) {
            throw new runtime.RequiredError('entity','Required parameter requestParameters.entity was null or undefined when calling createNewUsingPOST3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.entity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * createNew
     */
    async createNewUsingPOST3(requestParameters: CreateNewUsingPOST3Request): Promise<User> {
        const response = await this.createNewUsingPOST3Raw(requestParameters);
        return await response.value();
    }

    /**
     * delete
     */
    async deleteUsingDELETE3Raw(requestParameters: DeleteUsingDELETE3Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete
     */
    async deleteUsingDELETE3(requestParameters: DeleteUsingDELETE3Request): Promise<void> {
        await this.deleteUsingDELETE3Raw(requestParameters);
    }

    /**
     * getOneById
     */
    async getOneByIdUsingGET3Raw(requestParameters: GetOneByIdUsingGET3Request): Promise<runtime.ApiResponse<UserDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOneByIdUsingGET3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * getOneById
     */
    async getOneByIdUsingGET3(requestParameters: GetOneByIdUsingGET3Request): Promise<UserDTO> {
        const response = await this.getOneByIdUsingGET3Raw(requestParameters);
        return await response.value();
    }

}
