/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  User,
  UserFromJSON,
  UserToJSON,
  UserDTO,
  UserDTOFromJSON,
  UserDTOToJSON,
} from "../models";

export interface CreateNewUsingPOST5Request {
  entity: User;
}

export interface DeleteUsingDELETE5Request {
  id?: number;
}

export interface GetOneByIdUsingGET5Request {
  id: number;
}

/**
 *
 */
export class UserResourceApi extends runtime.BaseAPI {
  /**
   * All
   */
  async allUsingGET5Raw(): Promise<runtime.ApiResponse<Array<UserDTO>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserDTOFromJSON)
    );
  }

  /**
   * All
   */
  async allUsingGET5(): Promise<Array<UserDTO>> {
    const response = await this.allUsingGET5Raw();
    return await response.value();
  }

  /**
   * createNew
   */
  async createNewUsingPOST5Raw(
    requestParameters: CreateNewUsingPOST5Request
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.entity === null ||
      requestParameters.entity === undefined
    ) {
      throw new runtime.RequiredError(
        "entity",
        "Required parameter requestParameters.entity was null or undefined when calling createNewUsingPOST5."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/user`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UserToJSON(requestParameters.entity),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue)
    );
  }

  /**
   * createNew
   */
  async createNewUsingPOST5(
    requestParameters: CreateNewUsingPOST5Request
  ): Promise<User> {
    const response = await this.createNewUsingPOST5Raw(requestParameters);
    return await response.value();
  }

  /**
   * delete
   */
  async deleteUsingDELETE5Raw(
    requestParameters: DeleteUsingDELETE5Request
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete
   */
  async deleteUsingDELETE5(
    requestParameters: DeleteUsingDELETE5Request
  ): Promise<void> {
    await this.deleteUsingDELETE5Raw(requestParameters);
  }

  /**
   * getOneById
   */
  async getOneByIdUsingGET5Raw(
    requestParameters: GetOneByIdUsingGET5Request
  ): Promise<runtime.ApiResponse<UserDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getOneByIdUsingGET5."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/user/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDTOFromJSON(jsonValue)
    );
  }

  /**
   * getOneById
   */
  async getOneByIdUsingGET5(
    requestParameters: GetOneByIdUsingGET5Request
  ): Promise<UserDTO> {
    const response = await this.getOneByIdUsingGET5Raw(requestParameters);
    return await response.value();
  }
}
