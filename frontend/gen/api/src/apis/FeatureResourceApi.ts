/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  Feature,
  FeatureFromJSON,
  FeatureToJSON,
  FeatureDTO,
  FeatureDTOFromJSON,
  FeatureDTOToJSON,
} from "../models";

export interface AddFeatureToProjectUsingPOSTRequest {
  projectId: number;
  feature: Feature;
}

export interface CreateNewUsingPOSTRequest {
  entity: Feature;
}

export interface DeleteUsingDELETERequest {
  id?: number;
}

export interface GetOneByIdUsingGETRequest {
  id: number;
}

/**
 *
 */
export class FeatureResourceApi extends runtime.BaseAPI {
  /**
   * addFeatureToProject
   */
  async addFeatureToProjectUsingPOSTRaw(
    requestParameters: AddFeatureToProjectUsingPOSTRequest
  ): Promise<runtime.ApiResponse<Feature>> {
    if (
      requestParameters.projectId === null ||
      requestParameters.projectId === undefined
    ) {
      throw new runtime.RequiredError(
        "projectId",
        "Required parameter requestParameters.projectId was null or undefined when calling addFeatureToProjectUsingPOST."
      );
    }

    if (
      requestParameters.feature === null ||
      requestParameters.feature === undefined
    ) {
      throw new runtime.RequiredError(
        "feature",
        "Required parameter requestParameters.feature was null or undefined when calling addFeatureToProjectUsingPOST."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/feature/{projectId}`.replace(
        `{${"projectId"}}`,
        encodeURIComponent(String(requestParameters.projectId))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: FeatureToJSON(requestParameters.feature),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeatureFromJSON(jsonValue)
    );
  }

  /**
   * addFeatureToProject
   */
  async addFeatureToProjectUsingPOST(
    requestParameters: AddFeatureToProjectUsingPOSTRequest
  ): Promise<Feature> {
    const response = await this.addFeatureToProjectUsingPOSTRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * All
   */
  async allUsingGETRaw(): Promise<runtime.ApiResponse<Array<FeatureDTO>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/feature`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(FeatureDTOFromJSON)
    );
  }

  /**
   * All
   */
  async allUsingGET(): Promise<Array<FeatureDTO>> {
    const response = await this.allUsingGETRaw();
    return await response.value();
  }

  /**
   * createNew
   */
  async createNewUsingPOSTRaw(
    requestParameters: CreateNewUsingPOSTRequest
  ): Promise<runtime.ApiResponse<Feature>> {
    if (
      requestParameters.entity === null ||
      requestParameters.entity === undefined
    ) {
      throw new runtime.RequiredError(
        "entity",
        "Required parameter requestParameters.entity was null or undefined when calling createNewUsingPOST."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/feature`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: FeatureToJSON(requestParameters.entity),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeatureFromJSON(jsonValue)
    );
  }

  /**
   * createNew
   */
  async createNewUsingPOST(
    requestParameters: CreateNewUsingPOSTRequest
  ): Promise<Feature> {
    const response = await this.createNewUsingPOSTRaw(requestParameters);
    return await response.value();
  }

  /**
   * delete
   */
  async deleteUsingDELETERaw(
    requestParameters: DeleteUsingDELETERequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/feature`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete
   */
  async deleteUsingDELETE(
    requestParameters: DeleteUsingDELETERequest
  ): Promise<void> {
    await this.deleteUsingDELETERaw(requestParameters);
  }

  /**
   * getOneById
   */
  async getOneByIdUsingGETRaw(
    requestParameters: GetOneByIdUsingGETRequest
  ): Promise<runtime.ApiResponse<FeatureDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getOneByIdUsingGET."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/feature/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeatureDTOFromJSON(jsonValue)
    );
  }

  /**
   * getOneById
   */
  async getOneByIdUsingGET(
    requestParameters: GetOneByIdUsingGETRequest
  ): Promise<FeatureDTO> {
    const response = await this.getOneByIdUsingGETRaw(requestParameters);
    return await response.value();
  }
}
